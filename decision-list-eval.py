#!/usr/bin/python

"""
CS 5761 PA 4 "Decision Maker"
Program 3: Evaluates test data
Author: Ruta Wheelock
Date: 11/15/2017

Description:
The program compares answers generated by decision-list-test.py program
with the correct answers, calculates accuracy, and outputs confusion matrix.

To run the program from terminal, execute:
./decision-list-eval.py line-key.txt line-answers.txt
Second command line argument is a filename for the correct answer file,
third argument is for the answer file generated by decision-list-test.py

Example:
Sample output to the following command:
% ./decision-list-eval.py interest-n-key.txt interest-n-answers.txt
Total count: 121
Correct count: 111
Accuracy: 91.74%

Confusion Matrix: (raw counts)
----------| interest_5 | interest_6
interest_5                    7
interest_6     3

"""

from __future__ import division
import sys


def main():

    # Check if enought command line argumenrs are provided
    if (len(sys.argv) < 3):
        print "Please provide key data and answers as a second and third command line arguments."
        exit(1);

    # Read in command line arguments into variables
    key_file = str(sys.argv[1])
    answer_file = str(sys.argv[2])

    # Open key and answer data
    try:
        key_data = open(key_file, 'r')
        answer_data = open(answer_file, 'r')
    except IOError as e:
        print "Please provide proper names for key and answer files!"
        print "I/O error({0}): {1}".format(e.errno, e.strerror)

    # Split key and answer data into lines
    keys = key_data.read().splitlines()
    answers = answer_data.read().splitlines()

    # Create a set of senses
    set_of_senses = set()
    for key in keys:
        set_of_senses.add(key.split()[2])

    # Save sense names in varibles 
    sense_1_raw = set_of_senses.pop()
    sense_2_raw = set_of_senses.pop()

    # Strip unnecessary charcters from the sense names
    sense_1 = sense_1_raw.rstrip('"/>\n').partition('senseid="')[2]
    sense_2 = sense_2_raw.rstrip('"/>\n').partition('senseid="')[2]

    # Declare variables for calculations
    total = 0
    correct = 0
    sense_1_wrong = 0
    sense_2_wrong = 0
    # Loop through every line in key file
    for i in range(len(keys)):
        # If the key and answer match, increment correct count
        if keys[i] == answers[i]:
            correct += 1
        # Otherwise found which sense was evaluated wrong and
        # and incremend appropriate counter
        elif keys[i].split()[2] == sense_1_raw:
            sense_1_wrong += 1
        else:
            sense_2_wrong += 1

        total += 1

    # Calculate accuracy of the program
    correct_perc = round(correct/total*100, 2)

    # Display counts and confusion matrix
    print "Total count: {}".format(total)
    print "Correct count: {}".format(correct,)
    print "Accuracy: {}% \n".format(correct_perc)
    print "Confusion Matrix: (raw counts)"
    longest_w = max(len(sense_1), len(sense_2))
    dist_1 = 2*longest_w
    print "-"*longest_w + '| {} | {}'.format(sense_1, sense_2)
    print "{}".format(sense_1) + " "*dist_1 + "{} ".format(sense_1_wrong)
    print "{}     {}".format(sense_2, sense_2_wrong)


    # Close files
    key_data.close()
    answer_data.close()

                                      
if __name__ == "__main__":
    main()








    
